generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

model User {
    id        Int        @id @default(autoincrement())
    uuid      String     @unique @default(uuid())
    firstName String
    lastName  String
    email     String     @unique
    password  String
    role      Role       @default(USER)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    gift      Gift[]
    Session   Session[]
    Feedback  Feedback[]
    Person    Person[]
}

model Person {
    id              Int            @id @default(autoincrement())
    uuid            String         @unique @default(uuid())
    name            String
    sendReminders   Boolean
    userUUID        String
    user            User           @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    anniversaryUUID String         @unique
    Anniversary     Anniversary[]
    PersonPicture   PersonPicture?
}

model Gift {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid())
    receiver  String
    gift      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userUUID  String?
    user      User?    @relation(fields: [userUUID], references: [uuid])
}

model Anniversary {
    id         Int      @id @default(autoincrement())
    uuid       String   @unique @default(uuid())
    name       String
    date       DateTime @db.Date
    personUUID String
    person     Person   @relation(fields: [uuid], references: [anniversaryUUID], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Session {
    id         String   @id @default(uuid())
    userId     String
    userUUID   String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    isLoggedIn Boolean  @default(false)
    user       User?    @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)
}

model Feedback {
    feedbackID   Int      @id @default(autoincrement())
    feedbackUUID String   @unique @default(uuid())
    feedbackText String
    userUUID     String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User?    @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)
}

model PersonPicture {
    id         Int      @id @default(autoincrement())
    uuid       String   @unique @default(uuid())
    thumbnail  Bytes    @db.ByteA
    picture    Bytes    @db.ByteA
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    personUUID String   @unique
    person     Person   @relation(fields: [personUUID], references: [uuid], onDelete: Cascade)
}
