generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

model User {
    id        Int        @id @default(autoincrement())
    uuid      String     @unique @default(uuid())
    firstName String
    lastName  String
    email     String     @unique
    password  String
    role      Role       @default(USER)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    gift      Gift[]
    Session   Session[]
    Feedback  Feedback[]
    Person    Person[]
}

model Person {
    id                 Int             @id @default(autoincrement())
    uuid               String          @unique @default(uuid())
    name               String
    sendReminders      Boolean
    // map:in käyttö napattu täältä https://github.com/prisma/prisma/discussions/11108
    // onko väärä yhdistää kuvan "omistaja" userUUID:llä?
    profilePictureUUID String?         @unique
    profilePicture     ProfilePicture? @relation(fields: [profilePictureUUID], references: [uuid], onDelete: Cascade, map: "picture_fk")
    userUUID           String?
    // onDelete: Cascade pitäisi olla ihan ok idea, koska jos User poistetaan ei Person:ia pitäisi tarvita
    user               User?           @relation(fields: [userUUID], references: [uuid], onDelete: Cascade, map: "user_fk")
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    Anniversary        Anniversary[]
}

model Gift {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid())
    receiver  String
    gift      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userUUID  String?
    user      User?    @relation(fields: [userUUID], references: [uuid])
}

model Anniversary {
    id         Int      @id @default(autoincrement())
    uuid       String   @unique @default(uuid())
    name       String
    date       DateTime @db.Date
    userUUID   String
    personUUID String?
    person     Person?  @relation(fields: [personUUID], references: [uuid], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Session {
    id         String   @id @default(uuid())
    userId     String
    userUUID   String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    isLoggedIn Boolean  @default(false)
    user       User?    @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)
}

model Feedback {
    feedbackID   Int      @id @default(autoincrement())
    feedbackUUID String   @unique @default(uuid())
    feedbackText String
    userUUID     String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User?    @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)
}

model ProfilePicture {
    id        Int      @id @default(autoincrement())
    uuid      String   @unique @default(uuid())
    userUUID  String   @unique
    thumbnail Bytes    @db.ByteA
    picture   Bytes    @db.ByteA
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // tähän Person:iin ei ole laitettu relaatiota, koska relaatio tulee jo Person-modelista
    Person    Person?
}
